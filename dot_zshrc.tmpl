# Path to your oh-my-zsh installation.
export ZSH=~/.oh-my-zsh

# User configuration moved to .zshenv
source $HOME/.zshmyenv

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="robbyrussell"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git history-substring-search zsh-syntax-highlighting)

source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

{{- if eq .category "work" }}
# Aliases for working with local dev platform
docker_compose_exec() {
    docker-compose exec console "$@"
}
alias dc="docker-compose"
alias dcu="docker-compose up -d"
alias dch="docker-compose stop"
alias dcrmall="docker-compose rm console; docker image rm console_console"
alias dcs="docker_compose_exec /bin/bash"
alias dcl="docker-compose logs"
alias dclf="dcl -f"
dcsudo() {
    docker exec -u root -it $(docker ps -aqf "name=console_console") /bin/bash
}

alias rb="docker_compose_exec bundle"
alias rs="docker_compose_exec bash -c 'DISABLE_SPRING=1 bundle exec rails server -b 0.0.0.0'"
alias rw="docker_compose_exec bash -c 'bundle exec rake jobs:work'"
alias rc="docker_compose_exec bash -c 'bundle exec rails console'"
alias dcmb="docker-compose exec mysql bash -c 'mysqldump console_development' > ~/dbbackups/console_dev_`gdate +%s%N`.sql"
alias rdb="dcmb && docker_compose_exec bash -c 'bundle; npm install; bundle exec rake db:migrate'"
alias gcod="git checkout -- db/schema.rb"
{{- end }}

# Utility aliases
alias hgrep='history | egrep -i'
alias beep="echo -e '\a'"
alias ll="ls -lah"
alias jd='[ 0 = 0 ] && echo -e '\''good\a'\'' || echo -e '\''bad\a'\'''
alias bcf='bundle; bundle clean --force'

# History substring search
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down

# Create prompt with return status, timestamp, current dir, and git info
PROMPT='${ret_status} %D %* %{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)'

{{- if eq .category "work" }}
# Kube Dashboard commands
function kube_mini() {
  kubectl config use-context minikube
}

function kube_staging() {
  source ~/assume_role.sh 943976103640 skomanduri 631627684437 BocceDeployer
  kubectl config use-context cuddly-cuttlefish.services-staging.civis.io
}


function kube_prod() {
  source ~/assume_role.sh 943976103640 skomanduri 494246847414 BocceDeployer
  kubectl config use-context spurious-spoon.services.civis.io
}

# Display the current context and namespace
function kcon() {
  kubectl config view -o json | jq --arg current_context "$(kubectl config current-context)" '.contexts | .[] | if .name == ($current_context) then {current_context: .name, current_namespace: .context.namespace} else empty end'
}

# If given an arg, set the current namespace to that. Otherwise, display the current namespace
function kns() {
  if [ $# -eq 0 ]; then
    kubectl config view -o json | jq --arg current_context "$(kubectl config current-context)" '.contexts | .[] | if .name == ($current_context) then .context.namespace else empty end'
  else
    kubectl config set-context $(kubectl config current-context) --namespace=$1
  fi
}

# start up the K8s Dashboard for staging or production
# USAGE: kube_dashboard [staging|production]
function kube_dashboard() {
  if [ -z "$1" ]; then
    echo "One argument must be passed in and it must be either staging or production"
    return 1
  fi

  pushd ~/iam-role-injector
  source awscli/bin/activate

  if [[ $1 == "staging" ]]; then
    kube_staging
  elif [[ $1 == "production" ]]; then
    kube_prod
  fi

  kubectl get secrets developer-read-token -n kube-system -o json | jq -r .data.token | base64 --decode | pbcopy
  kill_dashboard
  kubectl proxy &
  open http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/
  echo "Your auth token is in your clipboard. Just paste it into the prompt"
  popd
}

function kill_dashboard() {
  pid=$(ps aux | grep 'kubectl proxy' | grep -v grep | awk '{print $2}')
  if ! [ -z $pid ]; then
    echo "Killing old dashboard process"
    kill -9 $pid
  fi
}

source ~/.kube/functions.sh
{{- end }}
