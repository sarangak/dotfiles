{{- if ne .category "linux" -}}
# Add nix here because Mac updates tend to reset /etc/zshrc
# Nix
if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
  . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
fi
# End Nix
{{- end }}

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your oh-my-zsh installation.
export ZSH=~/.oh-my-zsh

# User configuration moved to .zshenv
source $HOME/.zshmyenv

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="powerlevel10k/powerlevel10k"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git history-substring-search zsh-syntax-highlighting zsh-autosuggestions)

source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Utility aliases
alias hgrep='history | egrep -i'
alias beep="echo -e '\a'"
alias ll="exa -la"
alias cat="bat"
alias man="batman"
alias pcat="prettybat"
{{ if eq .category "linux" }}
alias jd='[ 0 = 0 ] && echo -e '\''good\a'\'' || echo -e '\''bad\a'\'''
{{ else }}
alias jd='[[ $? -eq 0 ]] && say "succeeded" || say "failed"'
{{ end }}
alias bcf='bundle; bundle clean --force'

{{ if ne .category "linux" -}}
function ramdisk() {
  local SIZE_IN_MB=$1
  local output=$(hdiutil attach -nobrowse -nomount ram://$((2 * 1024 * SIZE_IN_MB)))
  local ramdiskpath=$(echo "$output" | grep "/dev/disk" | awk '{print $1}')
  echo $ramdiskpath

  if [ -z "$ramdiskpath" ]; then
    echo "Error: Could not create RAM disk."
    return 1
  fi

  diskutil eraseVolume HFS+ RAMDisk "$ramdiskpath"
  cd /Volumes/RAMDisk
  alias rmramdisk="hdiutil detach $ramdiskpath"
}
{{- end }}

# Utility aliases for Docker
alias dockershell="docker run --rm -i -t --entrypoint=/bin/bash"
alias dockershellsh="docker run --rm -i -t --entrypoint=/bin/sh"

function dockershellhere() {
    dirname=${PWD##*/}
    docker run --rm -it --entrypoint=/bin/bash -v `pwd`:/${dirname} -w /${dirname} "$@"
}
function dockershellshhere() {
    dirname=${PWD##*/}
    docker run --rm -it --entrypoint=/bin/sh -v `pwd`:/${dirname} -w /${dirname} "$@"
}

{{ if eq .category "work" -}}
source $HOME/.zshworkrc
{{- end }}

# History substring search
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# fzf zsh integration (assumes fzf is installed by nix)
if [ -n "${commands[fzf-share]}" ]; then
  source "$(fzf-share)/key-bindings.zsh"
  source "$(fzf-share)/completion.zsh"
fi

# zoxide init with support for cd-ing to the dir of a given file path
autoload -Uz compinit && compinit
eval "$(zoxide init --no-cmd zsh)"
function z () {
  if [ $# -eq 0 ] ; then
    # no arguments
    __zoxide_z
	elif [[ -d "$1" ]] ; then
		__zoxide_z "$1"
	elif [[ -f  "$1" ]] ; then
		__zoxide_z "$(dirname "$1")"
  else
    __zoxide_z "$@"
	fi
}
alias zi='__zoxide_zi'
alias cd=z

# ------------------------------------------------------------------------------
# pcodex: prompts OpenAI's Codex CLI
#
# Usage: pcodex [-m model] [-a approval_mode] [-u] "prompt text"
#
# Options:
#   -m model:           Specify the model to use (e.g., "o3"). Defaults to "o3".
#   -a approval_mode:   Set the approval mode ('suggest', 'always', 'never').
#                       Defaults to 'suggest'.
#   -u:                 Update the @openai/codex-cli package and exit.
#
function pcodex () {
  local model='gpt-5'
  local approval='on-request'
  local pkg_name='@openai/codex'

  local OPTIND opt
  while getopts ":m:a:u" opt; do
    case "$opt" in
      m) model="$OPTARG" ;;
      a) approval="$OPTARG" ;;
      u)
        echo "Updating ${pkg_name}..."
        echo "\n--- CURRENT VERSION ---"
        npm list -g --depth=0 "${pkg_name}"
        echo "\n--- RUNNING UPDATE ---"
        npm update -g "${pkg_name}"
        echo "\n--- NEW VERSION ---"
        npm list -g --depth=0 "${pkg_name}"
        return 0
        ;;
      *)
        echo "Usage: pcodex [-m model] [-a approval_mode] [-u] \"prompt text\""
        return 1
        ;;
    esac
  done
  shift $((OPTIND-1)) # remove processed options

  if (( $# == 0 )); then
    echo "Error: no prompt supplied."
    echo "Usage: pcodex [-m model] [-a approval_mode] [-u] \"prompt text\""
    return 1
  fi
  local prompt="$*"

  (
    export OPENAI_API_KEY=$(< ~/.openaikey)
    local approval_flag
    if [[ "$approval" == "yolo" ]]; then
      approval_flag='--full-auto'
    elif [[ "$approval" != "default" ]]; then
      approval_flag="--ask-for-approval=$approval"
    fi
    codex --config preferred_auth_method="apikey" -m "$model" $approval_flag "$prompt"
  )
}

# ------------------------------------------------------------------------------
# pgemini: prompts Google's Gemini CLI
#
# Usage: pgemini [-m model] [-a approval_mode] [-u] "prompt text"
#
# Options:
#   -m model:           Specify the model to use.
#                       Defaults to "gemini-1.5-pro-latest".
#   -a approval_mode:   Set the approval mode ('default', 'auto_edit', 'yolo').
#                       Defaults to 'default'.
#   -u:                 Update the @google/gemini-cli package and exit.
#
function pgemini () {
  local model='gemini-2.5-pro'
  local approval='default'
  local pkg_name='@google/gemini-cli'

  local OPTIND opt
  while getopts ":m:a:u" opt; do
    case "$opt" in
      m) model="$OPTARG" ;;
      a) approval="$OPTARG" ;;
      u)
        echo "Updating ${pkg_name}..."
        echo "\n--- CURRENT VERSION ---"
        npm list -g --depth=0 "${pkg_name}"
        echo "\n--- RUNNING UPDATE ---"
        npm update -g "${pkg_name}"
        echo "\n--- NEW VERSION ---"
        npm list -g --depth=0 "${pkg_name}"
        return 0
        ;;
      *)
        echo "Usage: pgemini [-m model] [-a approval_mode] [-u] \"prompt text\""
        return 1
        ;;
    esac
  done
  shift $((OPTIND-1))

  if (( $# == 0 )); then
    echo "Error: no prompt supplied."
    echo "Usage: pgemini [-m model] [-a approval_mode] [-u] \"prompt text\""
    return 1
  fi
  local prompt="$*"

  (
    export GOOGLE_CLOUD_PROJECT="$(< ~/.googlegeminiprojectid)"
    export GOOGLE_CLOUD_LOCATION="us-central1"
    local approval_flag
    if [[ "$approval" == "yolo" ]]; then
      approval_flag='--yolo'
    elif [[ "$approval" != "default" ]]; then
      approval_flag="--approval-mode=$approval"
    fi
    gemini --prompt-interactive "$prompt" -m "$model" $approval_flag
  )
}

# ------------------------------------------------------------------------------
# pclaude: prompts Anthropic's Claude Code CLI
#
# Usage: pclaude [-m model] [-a approval_mode] [-u] "prompt text"
#
# Options:
#   -m model:           Specify the model to use.
#                       Defaults to "claude-3-5-sonnet-20240620".
#   -a approval_mode:   Set the approval mode ('default', 'yolo').
#                       Defaults to 'default'.
#   -u:                 Update the @anthropic-ai/claude-code package and exit.
#
function pclaude () {
  local main_model='claude-opus-4-1@20250805'
  local small_fast_model='claude-3-5-haiku@20241022'
  local claude_region='us-east5'
  local approval='default'
  local pkg_name='@anthropic-ai/claude-code'

  local OPTIND opt
  while getopts ":m:a:u" opt; do
    case "$opt" in
      m) model="$OPTARG" ;;
      a) approval="$OPTARG" ;;
      u)
        echo "Updating ${pkg_name}..."
        echo "\n--- CURRENT VERSION ---"
        npm list -g --depth=0 "${pkg_name}"
        echo "\n--- RUNNING UPDATE ---"
        npm update -g "${pkg_name}"
        echo "\n--- NEW VERSION ---"
        npm list -g --depth=0 "${pkg_name}"
        return 0
        ;;
      *)
        echo "Usage: pclaude [-m model] [-a approval_mode] [-u] \"prompt text\""
        return 1
        ;;
    esac
  done
  shift $((OPTIND-1))

  if (( $# == 0 )); then
    echo "Error: no prompt supplied."
    echo "Usage: pclaude [-m model] [-a approval_mode] [-u] \"prompt text\""
    return 1
  fi
  local prompt="$*"

  (
    export CLAUDE_CODE_USE_VERTEX=1
    export CLOUD_ML_REGION="$claude_region"
    export ANTHROPIC_VERTEX_PROJECT_ID="$(< ~/.googlegeminiprojectid)"

    export ANTHROPIC_MODEL="$main_model"
    export ANTHROPIC_SMALL_FAST_MODEL="$small_fast_model"

    local approval_flag
    if [[ "$approval" == "yolo" ]]; then
      approval_flag='--dangerously-skip-permissions'
    fi
    claude $approval_flag prompt "$prompt"
  )
}

